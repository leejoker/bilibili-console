#!/usr/bin/env ruby

require 'thor'
require 'bilibili_console'

# bilibili-console command line
class BiliConsole < Thor
  BC = BilibiliConsole.new

  def self.exit_on_failure?
    true
  end

  desc 'info', 'help content'

  def info
    banner = File.read(File.expand_path('banner.txt', __dir__))
    puts <<~HELP
      #{banner}

      Usage: bilic [arguments]
        help    [command]          help messages
        login                      qrcode login
        user                       user info
        manga                      bilibili manga checkin
        down    [-s e p q]         download video
        fav     [-s m a ps pn]     show user video collections
    HELP
  end

  desc 'login', 'login with qrcode'

  def login
    puts BC.login
  end

  desc 'user', 'get user info'

  def user
    user = BC.login_user_info
    puts <<~USER
      uid: #{user.mid}
      uname: #{user.uname}
      level: #{user.level_info[:current_level]}
    USER
  end

  desc 'manga', 'checkin bilibili manga'

  def manga_checkin
    BC.manga.load_cookie
    body = BC.manga_checkin
    if body.code == 'invalid_argument'
      puts '您已经签到了'
    else
      puts '签到成功'
    end
  end

  desc 'down', 'download video by bv code'
  method_option :start, aliases: '-s', desc: 'start page'
  method_option :end, aliases: '-e', desc: 'end page'
  method_option :page, aliases: '-p', desc: 'order one page'
  method_option :qn, aliases: '-q', desc: 'video resolution ratio'

  def download_video(bv_id)
    BC.video.load_cookie
    options_dup = options.dup
    options_dup[:start] = 1 if options[:start].nil?
    options_dup[:qn] = '720' if options[:qn].nil?
    BC.download_video(bv_id, options_dup)
  end

  desc 'fav', 'show user fav info'
  method_option :search, aliases: '-s', desc: 'search in fav'
  method_option :fav, aliases: '-m', desc: 'ordered a fav to do some operations'
  method_option :page_size, aliases: '-ps', desc: 'page size'
  method_option :page_num, aliases: '-pn', desc: 'page number'
  method_option :all, aliases: '-a', desc: 'usr 1 for searching in all fav and 2 for searching in the ordered fav'

  def fav_info
    if options[:search].nil? && options[:fav].nil?
      fav_list
    else
      options_dup = options.dup
      fav_search(options_dup)
    end
  end

  desc 'search', 'Searching by type'
  method_option :page, aliases: '-p', desc: 'page number'

  def search(keyword)
    return if keyword.nil?

    options_dup = options.dup
    options_dup[:page] = 1 if options_dup[:page].nil?
    options_dup[:keyword] = keyword
    data = BC.search_keyword(options_dup)
    data&.result&.each do |video|
      puts <<~VIDEO
          av:            #{video.aid}
          bv:            #{video.bvid}
          title:         #{video.title}
          author:        #{video.author}
          desc:          #{video.description}
          pic:           #{video.pic}
        -----------------------------------------------------------------------
      VIDEO
    end
  end

  private

  def fav_list
    BC.user_fav_list.list.each do |fav|
      puts <<~FAV
          fav_id:         #{fav.fid}
          fav_name:       #{fav.title}
          media count:    #{fav.media_count}
        -----------------------------------------------------------------------
      FAV
    end
  end

  def fav_search(options)
    fav = BC.user_fav_list.list[0]
    user = BC.login_user_info
    options[:fav] = fav.fid.to_s if options[:fav].nil?
    options[:fav] += user.mid.to_s.slice(-2, 2)
    BC.list_fav_video(options)&.medias&.each do |media|
      puts <<~MEDIA
          title:         #{media.title}
          intro:         #{media.intro}
          bv:            #{media.bv_id}
        -----------------------------------------------------------------------
      MEDIA
    end
  end
end

BiliConsole.start
