#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/bilibili_console'

# bilibili-console command line
class BiliConsole < Thor
  BILI_CONSOLE = Bilibili::BilibiliConsole.new

  def self.exit_on_failure?
    true
  end

  desc 'info', 'help content'

  def info
    banner = File.read(File.expand_path('banner.txt', __dir__))
    puts <<~HELP
      #{banner}

      Usage: bilic [arguments]
        help    [command]          help messages
        login                      qrcode login
        user                       user info
        manga   [-i]               bilibili manga checkin
        down    [-s e p q]         download video
        fav     [-s m a s n]       show user video collections
    HELP
  end

  desc 'doctor', 'check environment and third-party dependencies'

  def doctor
    BILI_CONSOLE.doctor
  end

  desc 'login', 'login with qrcode'

  def login
    puts BILI_CONSOLE.do_login
  end

  desc 'user', 'get user info'

  def user
    user = BILI_CONSOLE.login_user_info
    puts <<~USER
      uid: #{user.mid}
      uname: #{user.uname}
      level: #{user.level_info[:current_level]}
    USER
  end

  desc 'manga', 'checkin bilibili manga'
  option :info, aliases: :i, desc: 'checkin info'

  def manga_checkin
    if options[:info].nil?
      body = BILI_CONSOLE.manga_checkin
      if body.code.nil?
        body = BILI_CONSOLE.manga_checkin_info
        puts <<~CHECKINFO
          签到成功!
          连续签到天数: #{body[:day_count]}
        CHECKINFO
      else
        puts '您已经签到了'
      end
    else
      body = BILI_CONSOLE.manga_checkin_info
      puts <<~CHECKINFO
        签到状态: #{body[:status] == 1 ? '已签到' : '未签到'}
        连续签到天数: #{body[:day_count]}
      CHECKINFO
    end
  end

  desc 'down', 'download video by bv code'
  option :start, aliases: :s, desc: 'start page'
  option :end, aliases: :e, desc: 'end page'
  option :page, aliases: :p, desc: 'order one page'
  option :qn, aliases: :q, desc: 'video resolution ratio'

  def download_video(bv_id)
    options_dup = options.dup
    options_dup[:start] = 1 if options[:start].nil?
    options_dup[:qn] = '720' if options[:qn].nil?
    BILI_CONSOLE.download_video(bv_id, options_dup)
  end

  desc 'fav', 'show user fav info'
  option :search, aliases: :s, desc: 'search in fav'
  option :fav, aliases: :m, desc: 'ordered a fav to do some operations'
  option :page_size, aliases: :p, desc: 'page size'
  option :page_num, aliases: :n, desc: 'page number'
  option :all, aliases: :a, desc: 'searching in all fav', type: :boolean

  def fav_info
    if options[:search].nil? && options[:fav].nil?
      fav_list
    else
      options_dup = options.dup
      fav_search(options_dup)
    end
  end

  desc 'search', 'Searching by type'
  option :page, aliases: :p, desc: 'page number'
  option :bv, desc: 'search by bv id', type: :boolean
  option :pic, desc: 'save video cover with ordered bv', type: :boolean
  option :sort, desc: <<~SORT
    默认为totalrank
    综合排序：totalrank
    最多点击：click
    最新发布：pubdate
    最多弹幕：dm
    最多收藏：stow
    最多评论：scores
    最多喜欢：attention（仅用于专栏）
  SORT

  def search(keyword)
    return if keyword.nil?

    options_dup = options.dup
    options_dup[:page] = 1 if options_dup[:page].nil?
    options_dup[:keyword] = keyword
    data = BILI_CONSOLE.search_keyword(options_dup)
    data&.result&.each do |video|
      puts <<~VIDEO
          av:            #{video.aid}
          bv:            #{video.bvid}
          title:         #{video.title}
          author:        #{video.author}
          desc:          #{video.description}
          pic:           #{video.pic}
          page_size:     #{video.page_size}
        -----------------------------------------------------------------------
      VIDEO
    end
  end

  private

  def fav_list
    BILI_CONSOLE.user_fav_list.list.each do |fav|
      puts <<~FAV
          fav_id:         #{fav.fid}
          fav_name:       #{fav.title}
          media count:    #{fav.media_count}
        -----------------------------------------------------------------------
      FAV
    end
  end

  def fav_search(options)
    fav = BILI_CONSOLE.user_fav_list.list[0]
    user = BILI_CONSOLE.login_user_info
    options[:fav] = fav.fid.to_s if options[:fav].nil?
    options[:fav] += user.mid.to_s.slice(-2, 2)
    BILI_CONSOLE.list_fav_video(options)&.medias&.each do |media|
      puts <<~MEDIA
          title:         #{media.title}
          intro:         #{media.intro}
          bv:            #{media.bv_id}
        -----------------------------------------------------------------------
      MEDIA
    end
  end
end

BiliConsole.start(ARGV)
