#!/usr/bin/env ruby

require 'thor'
require 'bilibili_console'

# bilibili-console command line
class BiliConsole < Thor
  def self.exit_on_failure?
    true
  end

  desc 'help', 'help content'

  def help
    banner = File.read(File.expand_path('banner.txt', __dir__))
    puts <<~HELP
      #{banner}

      Usage: bili-console [arguments]
        help    help messages
        login   qrcode login
        user    user info
        manga   bilibili manga checkin
    HELP
  end

  desc 'login', 'login with qrcode'

  def login
    bc = BilibiliConsole.new
    puts bc.login
  end

  desc 'user', 'get user info'

  def user
    bc = BilibiliConsole.new
    user = bc.login_user_info
    puts <<~USER
      uid: #{user.uid}
      uname: #{user.uname}
      level: #{user.level_info[:current_level]}
    USER
  end

  desc 'manga', 'checkin bilibili manga'

  def manga_checkin
    bc = BilibiliConsole.new
    bc.manga.load_cookie
    body = bc.manga_checkin
    if body.code == 'invalid_argument'
      puts '您已经签到了'
    else
      puts '签到成功'
    end
  end

  desc 'down', 'download video by bv code'
  method_option :start, aliases: '-s', desc: 'start page'
  method_option :page, aliases: '-p', desc: 'order one page'

  def download_video(bv_id)
    bc = BilibiliConsole.new
    bc.video.load_cookie
    start = options[:start].nil? ? 1 : options[:start]
    page = options[:page]
    bc.download_video(bv_id, start, page)
  end

  desc 'fav', 'show user fav info'
  method_option :ls, aliases: '-l', desc: 'show fav list'
  method_option :search, aliases: '-s', desc: 'search in fav'

  def fav_info
    if options[:search].nil?
      fav_list
    else
      fav_search(options[:search])
    end
  end

  private

  def fav_list
    bc = BilibiliConsole.new
    bc.user_fav_list.list.each do |fav|
      puts <<~FAV
          fav_id:         #{fav.fid}
          fav_name:       #{fav.title}
          media count:    #{fav.media_count}
        -----------------------------------------------------------------------
      FAV
    end
  end

  def fav_search(keyword)
    bc = BilibiliConsole.new
    fav = bc.user_fav_list.list[0]
    user = bc.login_user_info
    media_id = "#{fav.fid}#{user.uid.to_s.slice(-2, 2)}"
    bc.list_fav_video(media_id, 1, 10, keyword)&.medias&.each do |media|
      puts <<~MEDIA
          title:         #{media.title}
          intro:         #{media.intro}
          bv:            #{media.bv_id}
        -----------------------------------------------------------------------
      MEDIA
    end
  end
end

BiliConsole.start
